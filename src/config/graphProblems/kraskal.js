export const kraskal = {
    name: " Алгоритм Краскала",
    theory: {
        paragraphs: [
            "Особенностью алгоритма Краскала является то, что в качестве представления графа может использовать последовательность граней. \
            Для разряженных графов (m = O(n)) этот метод является наиболее эффективным.",
            //"KruskalMST(G)".split("KruskalMST(G)").map((paragraphs, index) => <>{index !== 0 && <b>KruskalMST(G)</b>} {paragraphs}</>),
            "1. T = {}",
            "2. foreach (u,v) ∈ E в порядке возрастания веса c",
            "3. /TAB/ if вершины u,v принадлежат разным поддеревьям T",
            "4. T = T ∪ {(u,v)}",
            "5. return T",
            "Концепция алгоритма описывается следующим образом. Пусть Т представляет собой лес MST, если грань (u,w) принадлежит тому же поддереву T'⊂ T, \
            то (согласно свойству цикла) она является самой весомой гранью некоторого цикла С ⊆ T' ∪ {(u,w)} и, следовательно, может быть проигнорирована алгоритмом.\
            Иначе (u,v) соединяет два MST дерева  T1 и T2. Грань (u,w) - самая легкая между двумя деревьями, иначе данное соединение было бы обнаружено ранее.\
            Согласно свойству сечения она добавляется в дерево MST. Время выполнения алгоритма составляет O(m log m), которое тратиться в большинстве своём на сортировку граней графа."],
          graphAnimationExample: {
              graph: {
                  nodes: [
                      { id: 1, label: "1" },
                      { id: 2, label: "2" },
                      { id: 3, label: "3" },
                      { id: 4, label: "4" }
                    ],
                  edges: [
                    { id: 12, from: 1, to: 2, label: "1", font: {size: 45} },
                    { id: 23, from: 2, to: 3 },
                    { id: 24, from: 2, to: 4 },
                    { id: 34, from: 3, to: 4 }
                    ]
                },
              animationPath: []
            },
        },
        graphQuestion: {
            graph: {
                nodes: [
                  { id: 1, label: "1" },
                  { id: 2, label: "2" },
                  { id: 3, label: "3" },
                  { id: 4, label: "4" },
                  { id: 5, label: "5" },
                  { id: 6, label: "6" },
                  { id: 7, label: "7" },
                  { id: 8, label: "8" }
                ],
                edges: [
                  { id: 12, from: 1, to: 2 },
                  { id: 13, from: 1, to: 3 },
                  { id: 24, from: 2, to: 4 },
                  { id: 25, from: 2, to: 5 },
                  { id: 36, from: 3, to: 6 },
                  { id: 68, from: 6, to: 8 },
                  { id: 57, from: 5, to: 7 }
                ]
            },
            correctPaths: [
              [13, 12, 24, 25, 36, 57, 68],
              [13, 12, 24, 25, 36, 68, 57],
              [13, 12, 25, 24, 36, 57, 68],
              [13, 12, 25, 24, 36, 68, 57],
              [13, 12, 36, 24, 25, 57, 68],
              [13, 12, 36, 24, 25, 68, 57],
              [13, 12, 36, 25, 24, 57, 68],
              [13, 12, 36, 25, 24, 68, 57],
              [12, 13, 24, 25, 36, 57, 68],
              [12, 13, 24, 25, 36, 68, 57],
              [12, 13, 25, 24, 36, 57, 68],
              [12, 13, 25, 24, 36, 68, 57],
              [12, 13, 36, 24, 25, 57, 68],
              [12, 13, 36, 24, 25, 68, 57],
              [12, 13, 36, 25, 24, 57, 68],
              [12, 13, 36, 25, 24, 68, 57]
            ]
    }
}